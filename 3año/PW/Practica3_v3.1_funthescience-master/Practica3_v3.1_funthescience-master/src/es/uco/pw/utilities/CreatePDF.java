/**
 * 
 * @author Oscar Godoy Calderon
 * @brief Clase java para la creacion de PDF a partir de los CV de los usuarios
 * @date 05-01-2020
 * 
 */

package es.uco.pw.utilities;

import java.io.FileOutputStream;
import java.util.Date;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import es.uco.pw.display.bean.ResumeBean;

public class CreatePDF {
	
    private String FILE;
    private Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,Font.BOLD);
    private Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,Font.NORMAL, BaseColor.RED);
    private Font blackFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,Font.NORMAL, BaseColor.BLACK);
    private Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,Font.BOLD);
    private Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,Font.BOLD);
    private ResumeBean resume;
    
    public CreatePDF(String file, ResumeBean resume) {
		this.FILE = file;
		this.resume = resume;
	}

	/***************************************************************/
	private void addMetaData(Document document) {
        document.addTitle("PDF-Tutorials");
        document.addSubject("Using iText");
        document.addKeywords("Java, PDF, iText");
        document.addAuthor("FundTheScience-Group");
        document.addCreator("FundTheScience-Group");
    }
	
	public boolean generatePDF() {

	    try {
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(FILE));
            document.open();
            addMetaData(document);
            addTitlePage(document);
           // addContent(document);
            document.close();
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
		
		/*********************************************************/
		return true;
	}

    private void addTitlePage(Document document)throws DocumentException {
    	
        Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, 1);
        // Lets write a big header
        preface.add(new Paragraph("Curriculum Vitae", catFont));

        addEmptyLine(preface, 1);
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph(resume.getFullName(),smallBold));
      
        addEmptyLine(preface, 1);
        preface.add(new Paragraph(resume.getAddress(),blackFont));

        addEmptyLine(preface, 1);
        preface.add(new Paragraph(resume.getEmail(),blackFont));

        addEmptyLine(preface, 1);
        String phone = Integer.toString(resume.getPhone());
        preface.add(new Paragraph(phone,blackFont));

        addEmptyLine(preface, 2);
        preface.add(new Paragraph("EXPERIENCIA PROFESIONAL",smallBold));

        //addEmptyLine(preface, 1);
        preface.add(new Paragraph(resume.getExperience_professional(),blackFont));
        
        addEmptyLine(preface, 2);
        preface.add(new Paragraph("FORMACION ACADEMICA",smallBold));
        
        //addEmptyLine(preface, 1);
        document.newPage();
        preface.add(new Paragraph(resume.getStudies(),blackFont));
        
        addEmptyLine(preface, 2);
        preface.add(new Paragraph("REFERENCIAS",smallBold));
        
        //addEmptyLine(preface, 1);
        preface.add(new Paragraph(resume.getReferer(),blackFont));
        
        addEmptyLine(preface, 2);
        preface.add(new Paragraph("IDIOMAS",smallBold));
        
        //addEmptyLine(preface, 1);
        preface.add(new Paragraph(resume.getLanguages(),blackFont));
        
        addEmptyLine(preface, 2);
        preface.add(new Paragraph("LENGUAJES DE PROGRAMACION",smallBold));
        
        //addEmptyLine(preface, 1);
        preface.add(new Paragraph(resume.getProgramming(),blackFont));
        
        document.add(preface);
        // Start a new page
        //document.newPage();
    }

    private void addContent(Document document) throws DocumentException {
        Anchor anchor = new Anchor("First Chapter", catFont);
        anchor.setName("First Chapter");

        // Second parameter is the number of the chapter
        Chapter catPart = new Chapter(new Paragraph(anchor), 1);

        Paragraph subPara = new Paragraph("Subcategory 1", subFont);
        Section subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("Hello"));

        subPara = new Paragraph("Subcategory 2", subFont);
        subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("Paragraph 1"));
        subCatPart.add(new Paragraph("Paragraph 2"));
        subCatPart.add(new Paragraph("Paragraph 3"));

        // add a list
        createList(subCatPart);
        Paragraph paragraph = new Paragraph();
        addEmptyLine(paragraph, 5);
        subCatPart.add(paragraph);

        // add a table
        createTable(subCatPart);

        // now add all this to the document
        document.add(catPart);

        // Next section
        anchor = new Anchor("Second Chapter", catFont);
        anchor.setName("Second Chapter");

        // Second parameter is the number of the chapter
        catPart = new Chapter(new Paragraph(anchor), 1);

        subPara = new Paragraph("Subcategory", subFont);
        subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("This is a very important message"));

        // now add all this to the document
        document.add(catPart);

    }

    private void createTable(Section subCatPart)
            throws BadElementException {
        PdfPTable table = new PdfPTable(3);

        // t.setBorderColor(BaseColor.GRAY);
        // t.setPadding(4);
        // t.setSpacing(4);
        // t.setBorderWidth(1);

        PdfPCell c1 = new PdfPCell(new Phrase("Table Header 1"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Table Header 2"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Table Header 3"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);

        table.addCell("1.0");
        table.addCell("1.1");
        table.addCell("1.2");
        table.addCell("2.1");
        table.addCell("2.2");
        table.addCell("2.3");

        subCatPart.add(table);

    }

    private void createList(Section subCatPart) {
        List list = new List(true, false, 10);
        list.add(new ListItem("First point"));
        list.add(new ListItem("Second point"));
        list.add(new ListItem("Third point"));
        subCatPart.add(list);
    }

    private void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }

}